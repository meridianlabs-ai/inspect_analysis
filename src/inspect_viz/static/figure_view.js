// js/coordinator/coodinator.ts
import {
  Coordinator,
  wasmConnector,
  Selection,
  Param
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";

// js/coordinator/duckdb.ts
import {
  getJsDelivrBundles,
  selectBundle,
  AsyncDuckDB,
  ConsoleLogger,
  LogLevel
} from "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.29.0/+esm";
async function initDuckdb() {
  const JSDELIVR_BUNDLES = getJsDelivrBundles();
  const bundle = await selectBundle(JSDELIVR_BUNDLES);
  const worker_url = URL.createObjectURL(
    new Blob([`importScripts("${bundle.mainWorker}");`], {
      type: "text/javascript"
    })
  );
  const worker = new Worker(worker_url);
  const logger = new ConsoleLogger(LogLevel.WARNING);
  const db = new AsyncDuckDB(logger, worker);
  await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
  URL.revokeObjectURL(worker_url);
  return db;
}

// js/coordinator/dataframe.ts
var DataFrame = class {
  constructor(table, queries, params, selection) {
    this.table = table;
    this.queries = queries;
    this.params = params;
    this.selection = selection;
  }
};

// js/util/wait.ts
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// js/coordinator/coodinator.ts
var DataFrameCoordinator = class {
  constructor(conn_) {
    this.conn_ = conn_;
    this.dfs_ = /* @__PURE__ */ new Map();
    this.coordinator_ = new Coordinator();
    this.coordinator_.databaseConnector(wasmConnector({ connection: this.conn_ }));
  }
  async addDataFrame(id, source_id, buffer, queries) {
    if (id === source_id) {
      await this.conn_?.insertArrowFromIPCStream(buffer, {
        name: id,
        create: true
      });
    }
    const params = /* @__PURE__ */ new Map();
    for (const query of queries) {
      for (const p of Object.values(query.parameters)) {
        params.set(p.name, Param.value(p.value));
      }
    }
    this.dfs_.set(id, new DataFrame(source_id, queries, params, Selection.intersect()));
  }
  async getDataFrame(id) {
    while (true) {
      const df = this.dfs_.get(id);
      if (df) {
        return df;
      } else {
        await sleep(100);
      }
    }
  }
  async connectClient(client) {
    this.coordinator_.connect(client);
  }
};
var REACTIVE_DF_COORDINATOR_KEY = Symbol.for("@@reactive-df-coordinator");
async function dataFrameCoordinator() {
  const globalScope = typeof window !== "undefined" ? window : globalThis;
  if (!globalScope[REACTIVE_DF_COORDINATOR_KEY]) {
    globalScope[REACTIVE_DF_COORDINATOR_KEY] = (async () => {
      const duckdb = await initDuckdb();
      const conn = await duckdb.connect();
      return new DataFrameCoordinator(conn);
    })();
  }
  return globalScope[REACTIVE_DF_COORDINATOR_KEY];
}

// js/clients/figure_view.ts
import {
  MosaicClient as MosaicClient2,
  toDataColumns
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";
import { SelectQuery } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-sql@0.16.2/+esm";
import Plotly from "https://esm.sh/plotly.js-dist-min@3.0.1";
var FigureView = class extends MosaicClient2 {
  constructor(el_, figure_, table_, filterBy, queries_) {
    super(filterBy);
    this.el_ = el_;
    this.figure_ = figure_;
    this.table_ = table_;
    this.queries_ = queries_;
  }
  query(filter = []) {
    let query = SelectQuery.select("*").from(this.table_).where(filter);
    for (const q of this.queries_) {
      query = q.from(query);
    }
    return query;
  }
  queryResult(data) {
    const columns = toDataColumns(data).columns;
    const table = bindTable(this.figure_.data, columns);
    Plotly.react(this.el_, table, this.figure_.layout, this.figure_.config);
    return this;
  }
};
function bindTable(traces, columns) {
  traces = structuredClone(traces);
  traces.forEach((trace) => {
    const mapping = columnMapping(trace, Object.keys(columns));
    for (const [attr, col] of Object.entries(mapping)) {
      const arr = columns[col];
      if (arr) {
        setData(trace, attr.split("."), arr);
      } else {
        console.warn(`Column "${col}" not found in table`);
      }
    }
  });
  return traces;
}
function columnMapping(trace, cols) {
  const map = {};
  const lc = cols.map((c) => c.toLowerCase());
  for (const p of arrayProps(trace)) {
    const simple = p.split(".").pop().toLowerCase();
    const i2 = lc.indexOf(simple);
    if (i2 === -1) continue;
    const exists = p.split(".").reduce((o, k) => o?.[k], trace) !== void 0;
    if (exists) map[p] = cols[i2];
  }
  const used = new Set(Object.values(map));
  const unused = cols.filter((c) => !used.has(c));
  let i = 0;
  const needsX = !map.x && (!isOrientable(trace) || trace.orientation !== "h");
  const needsY = !map.y && (isOrientable(trace) && trace.orientation === "h" ? false : true);
  if (needsX && unused[i]) {
    map.x = unused[i++];
  }
  if (needsY && unused[i]) {
    map.y = unused[i++];
  }
  const is3d = ["scatter3d", "surface", "mesh3d"].includes(trace.type ?? "");
  if (is3d && !map.z && unused[i]) {
    map.z = unused[i++];
  }
  return map;
}
function setData(trace, path, val) {
  const last = path.pop();
  let cur = trace;
  for (const k of path) {
    if (cur[k] == null || typeof cur[k] !== "object") cur[k] = {};
    cur = cur[k];
  }
  cur[last] = val;
}
function arrayProps(obj, prefix = "") {
  return Object.entries(obj).flatMap(
    ([k, v]) => Array.isArray(v) || ArrayBuffer.isView(v) ? [`${prefix}${k}`] : typeof v === "object" && v !== null ? arrayProps(v, `${prefix}${k}.`) : []
  );
}
function isOrientable(t) {
  return "orientation" in t;
}

// js/coordinator/convert.ts
import { SelectQuery as SelectQuery2 } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-sql@0.16.2/+esm";
function convertToSelectQuery(query) {
  const selectExpressions = {};
  for (const [alias, expr] of Object.entries(query.select)) {
    if (typeof expr === "string") {
      selectExpressions[alias] = expr;
    } else {
      selectExpressions[alias] = convertExpression(expr);
    }
  }
  let selectQuery = SelectQuery2.select(selectExpressions);
  if (query.distinct === true) {
    selectQuery = selectQuery.distinct();
  }
  if (query.where) {
    selectQuery = selectQuery.where(convertExpression(query.where));
  }
  if (query.groupby && query.groupby.length > 0) {
    const groupByFields = query.groupby.map((field) => {
      if (typeof field === "string") {
        return field;
      } else {
        if (typeof field.field === "string") {
          return field.field;
        } else {
          return convertExpression(field.field);
        }
      }
    });
    selectQuery = selectQuery.groupby(...groupByFields);
  }
  if (query.having) {
    selectQuery = selectQuery.having(convertExpression(query.having));
  }
  if (query.orderby && query.orderby.length > 0) {
    const orderByFields = query.orderby.map((orderBy) => {
      return orderBy.order === "desc" ? `-${orderBy.field}` : orderBy.field;
    });
    selectQuery = selectQuery.orderby(...orderByFields);
  }
  if (query.limit !== null && query.limit !== void 0) {
    selectQuery = selectQuery.limit(query.limit);
  }
  if (query.sample !== null && query.sample !== void 0) {
    selectQuery = selectQuery.sample(query.sample);
  }
  return selectQuery;
}
function convertExpression(expr) {
  if (typeof expr === "string" || typeof expr === "number" || typeof expr === "boolean") {
    return expr;
  }
  if ("type" in expr) {
    switch (expr.type) {
      case "function":
        return convertFunctionExpression(expr);
      case "and":
      case "or":
        return convertLogicalExpression(expr);
      case "parameter":
        return convertParameterExpression(expr);
      case "unknown":
        return convertUnknownExpression(expr);
      default:
        return convertBinaryExpression(expr);
    }
  }
  console.warn("Unknown expression type:", expr);
  return expr;
}
function convertFunctionExpression(expr) {
  const args = expr.args.map((arg) => convertExpression(arg));
  const fnName = expr.name.toLowerCase();
  return {
    type: "function",
    function: fnName,
    args
  };
}
function convertLogicalExpression(expr) {
  const expressions = expr.expressions.map((e) => convertExpression(e));
  if (expr.type === "and") {
    return expressions.reduce((acc, curr) => ({ type: "and", left: acc, right: curr }));
  } else {
    return expressions.reduce((acc, curr) => ({ type: "or", left: acc, right: curr }));
  }
}
function convertBinaryExpression(expr) {
  const left = convertExpression(expr.left);
  const right = convertExpression(expr.right);
  return {
    type: expr.type,
    left,
    right
  };
}
function convertParameterExpression(expr) {
  return {
    type: "parameter",
    name: expr.name
  };
}
function convertUnknownExpression(expr) {
  return {
    type: "raw",
    expression: expr.expression
  };
}

// js/widgets/figure_view.ts
async function render({ model, el }) {
  const df_id = model.get("df_id");
  const figure_json = model.get("figure_json");
  const figure = JSON.parse(figure_json);
  const coordinator = await dataFrameCoordinator();
  const df = await coordinator.getDataFrame(df_id);
  const queries = df.queries.map(convertToSelectQuery);
  console.log(queries);
  const view = new FigureView(el, figure, df.table, df.selection, queries);
  await coordinator.connectClient(view);
}
var figure_view_default = { render };
export {
  figure_view_default as default
};
//# sourceMappingURL=data:application/json;base64,
